////Using HashSet

import java.util.*;
public class Solution {
    public static List< Integer > sortedArray(int []a, int []b) {
        // Write your code here
        int i,n=a.length,m=b.length;
        HashSet<Integer> set=new HashSet<>();
        ArrayList<Integer> union=new ArrayList<>();
        for(i=0;i<n;i++)
        set.add(a[i]);
        for(i=0;i<m;i++)
        set.add(b[i]);
        for (int it:set)
        union.add(it);
        return union;
    }
}


//using 2 pointer approach

import java.util.*;
public class Solution {
    public static List< Integer > sortedArray(int []a, int []b) {
        // Write your code here
        int i=0,j=0,n=a.length,m=b.length;
        ArrayList <Integer> union=new ArrayList<>();
        while (i<n && j<m)
        {
            if(a[i]<b[j])
            {
                if (union.size()==0 || union.get(union.size()-1)!=a[i])
                union.add(a[i]);
            i++;
            }
            else
            {
                if (union.size()==0 || union.get(union.size()-1)!=b[j])
                union.add(b[j]);
              j++;  
            }
        }
        while (i<n)
        {
            if (union.get(union.size()-1)!=a[i])
               union.add(a[i]);
             i++;
        }
         while (j<m)
        {
            if (union.get(union.size()-1)!=b[j])
               union.add(b[j]);
            j++;
        }
        return union;
    }
}
