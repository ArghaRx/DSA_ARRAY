*****Brute****

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        HashSet<List<Integer>> set = new HashSet<>();
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
            if(nums[i]+nums[j]+nums[k]==0)
             {
         ArrayList<Integer> temp=new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[k]));
                        temp.sort(null);
                        set.add(temp);
                    }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(set);
        return ans;
    }
}



******BETTER*******

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>>set1=new HashSet<>();
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            Set<Integer> set2=new HashSet<>();
            for(int j=i+1;j<n;j++)
            {
                int third=-(nums[i]+nums[j]);
                if(set2.contains(third))
                {
                    List<Integer> temp=new ArrayList<>(Arrays.asList(nums[i],nums[j],third));
                    temp.sort(null);
                    set1.add(temp);

                }
                set2.add(nums[j]);
            }
        }
        List<List<Integer>> ans=new ArrayList<>(set1);
        return ans;
        
    }
}


*******OPTIMAL******

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            if(i!=0 && nums[i]==nums[i-1]) continue;
            int j=i+1;
            int k=n-1;
            while(j<k)
            {
                int sum=nums[i]+nums[j]+nums[k];
                if(sum>0) k--;
                else if(sum<0) j++;
                else
                {
                  List<Integer> temp=new ArrayList<>(Arrays.asList(nums[i],nums[j],nums[k]));
                    ans.add(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                     while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
     
        }
         
            return ans;
        
    }
}
