******BETTER*****

import java.util.*;
class Solution {
    public long beautifulSubarrays(int[] nums) {
        int n=nums.length;
        int cnt=0;
        int k=0;
        for(int i=0;i<n;i++)
        {
           int xor=0;
            for(int j=i;j<n;j++)
            {
                xor=xor^nums[j];
                if(xor==k) cnt++;
            }
        }
        return  cnt;
        
    }
}

Time Complexity:- O(N^2)                   Space Complexity:-O(1)



*****OPTIMAL*****

class Solution {
    public long beautifulSubarrays(int[] nums) {
        HashMap<Integer, Integer> mpp = new HashMap<>();
        int n = nums.length;
        int xr = 0;
        long cnt = 0;
        
        int k = 0; // Initialize k to 1
        mpp.put(xr, 1);
        
        for (int i = 0; i < n; i++) {
            xr = xr ^ nums[i];

            // By formula: x = xr ^ k
            int x = xr ^ k;

            // Add the occurrence of xr^k to the count
            if (mpp.containsKey(x)) {
                cnt += mpp.get(x);
            }

            if (mpp.containsKey(xr)) {
                mpp.put(xr, mpp.get(xr) + 1);
            } else {
                mpp.put(xr, 1);
            }
        }

Time complexity:- O(N)      Space Complexity:-O(N)
