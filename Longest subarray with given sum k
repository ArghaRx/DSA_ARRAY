//Brute force


public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        // Write your code here
        int maxlength=0;
        for(int i=0;i<a.length;i++)
        {
            for(int j=i;j<a.length;j++)
            {
                int sum=0;
                for(int x=i;x<=j;x++){

                  sum+=a[x];
               }

                     if(sum==k) 
                  maxlength=Math.max(maxlength,j-i+1);
            }
        }
        return maxlength;
    }
}


****BETTER***

public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        // Write your code here
        int maxlength=0;
        for(int i=0;i<a.length;i++)
        {
             int sum=0;
            for(int j=i;j<a.length;j++)
            {
              sum+=a[j];
               
                if(sum==k) 
                  maxlength=Math.max(maxlength,j-i+1);  
            }          
        }
        return maxlength;
    }
}


*****OPTOMAL*****

public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        // Write your code here
        int n=a.length,left=0,right=0,maxLen=0;
        long sum=a[0];

        while (right < n) {
                                   // if sum > k, reduce the subarray from left
                                     // until sum becomes less or equal to k:
            while (left <= right && sum > k) {
                sum -= a[left];
                left++;
            }

                                 // if sum = k, update the maxLen i.e. answer:
            if (sum == k) {
                maxLen = Math.max(maxLen, right - left + 1);
            }

                                // Move forward thw right pointer:
            right++;
            if (right < n) sum += a[right];
        }

        return maxLen;
    }
}
