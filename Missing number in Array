# Optimal Approach
//XOR
// a[]={0,1,3}

class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int xor1 =0;
        int  xor2=0;
        for(int i=0;i<n;i++)
        {
            xor1=xor1^nums[i];
            xor2=xor2^i+1;
        }
      
        
        return xor1^xor2;
        
    }
}

//SUM
// a[]={0,1,3}

class Solution {
    public int missingNumber(int[] nums) {
       int n=nums.length; //From here legth of array is 3
        int sum=(n*(n+1))/2;
        int s=0;
        for(int i=0;i<n;i++)
        {
            s+=nums[i];
        }
        return (sum-s);
        
    }
}


**BETTER
a[] = {1,2,4,5};;;;;;N=5(Size)

class Solution {
    int missingNumber(int array[], int n) {
        // Your Code Here
        
        

       int hash[]=new int[n+1];
       for(int i=0;i<n-1;i++)
       {
           hash[array[i]]++;
       }
       for (int j=1;j<=n;j++)
       {
           if(hash[j]==0)
           {
               return j;
           }
       }
       return -1;
    }
}
