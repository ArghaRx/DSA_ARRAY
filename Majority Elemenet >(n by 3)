*****BRUTE*****

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        ArrayList<Integer> ans=new ArrayList<>(); //take an list to store

        for(int i=0;i<nums.length;i++)
        {
              //if list is empty or list 1st value not equal to nums[i]
            if(ans.size()==0 || ans.get(0)!=nums[i])
            {
                  int cnt=0;

                     for(int j=0;j<nums.length;j++)
                       {
                         if(nums[i]==nums[j])
                          cnt++;
                       } ///end inner loop

                  if(cnt>nums.length/3) //check if count is greater than n/3
                  ans.add(nums[i]);     //add in list
              
            } //end if

                 if(ans.size()==2) break; //if ans is 2 the it fulled so break 
        }  //end outer loop
      return ans;  
    }
}

T.C. :- O(n^2)   S.C. - O(1)



******OPTIMAL*****

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int cnt1 = 0, cnt2 = 0;
        int ele1 = Integer.MIN_VALUE, ele2 = Integer.MIN_VALUE;
        
        for (int i = 0; i < nums.length; i++) {
            if (cnt1 == 0 && nums[i] != ele2) {
                ele1 = nums[i];
                cnt1 = 1;
            } else if (cnt2 == 0 && nums[i] != ele1) {
                ele2 = nums[i];
                cnt2 = 1;
            } else if (nums[i] == ele1) {
                cnt1++;
            } else if (nums[i] == ele2) {
                cnt2++;
            } else {
                cnt1--;
                cnt2--;
            }
        }
        
        List<Integer> list = new ArrayList<>();
        cnt1 = 0;
        cnt2 = 0;
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == ele1) {
                cnt1++;
            } else if (nums[i] == ele2) {
                cnt2++;
            }
        }
        
        int mini = nums.length / 3 + 1;
        if (cnt1 >= mini) {
            list.add(ele1);
        }
        if (cnt2 >= mini) {
            list.add(ele2);
        }
        
        return list;
    }
}

T.C. - O(n+n)
S.C. - O(1)
