******BEtter****

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {

        int n=nums.length;
        Set<List<Integer>> st=new HashSet<>();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                for(int k=j+1;k<n;k++)
                {

                    for(int l=k+1;l<n;l++)
                    {
                         long sum=nums[i]+nums[j];

                         sum+=nums[k];
                         sum+=nums[l]; 
                         if(sum==target)
                         {
           List<Integer> temp=new ArrayList<>(Arrays.asList(nums[i],nums[j],nums[k],nums[l]));
                Collections.sort(temp);
                        st.add(temp);
                         }

                    }
                 }
            }
          }

          List<List<Integer>> ans=new ArrayList<>(st);
        return ans;
        
        }
        
    }




****BETTER*****

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {

        int n=nums.length;
        Set<List<Integer>> st=new HashSet<>();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                Set<Long> set=new HashSet<>(); 
                for(int k=j+1;k<n;k++)
                {
                    long sum=nums[i];
                    sum+=nums[j];
                    sum+=nums[k];
                    long forth = target - sum;
                    if(set.contains(forth))
                    {
                List<Integer> temp=new ArrayList<>(Arrays.asList(nums[i],nums[j],nums[k],(int)forth));
                Collections.sort(temp);
                        st.add(temp);

                    }
                    set.add((long)nums[k]);
            }
          }
        }
        List<List<Integer>> ans=new ArrayList<>(st);
        return ans;
        
    }
}



******OPTIMAL*****

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        
        for (int i = 0; i < n ; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            for (int j = i + 1; j < n ; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                
                int k = j + 1;
                int l = n - 1;
                
                while (k < l) {
                     long sum = nums[i] ;
                    sum+= nums[j];
                    sum += nums[k] ;
                    sum+= nums[l];
                    
                      if(sum==target)
                      {
                        List<Integer> temp=new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        ans.add(temp);
                        k++;
                        l--;
                        
                        // Skip duplicate values
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                        
                      }  
                    
                    else if (sum > target) 
                        l--;
                    
                    else 
                        k++;
                    
                    
                    
                }
            }
        }
            return ans;
        
        
    }
}

---Time Complexity:--- O(N3), where N = size of the array.
Reason: Each of the pointers i and j, is running for approximately N times. 
And both the pointers k and l combined can run for approximately N times including
the operation of skipping duplicates. So the total time complexity will be O(N3). 

-----Space Complexity:-- O(no. of quadruplets), This space is only used to store the answer.
We are not using any extra space to solve this problem. So, from that perspective, 
space complexity can be written as O(1).
